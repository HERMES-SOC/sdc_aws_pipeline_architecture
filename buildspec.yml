version: 0.2

phases:
  pre_build:
    commands:
      # Install dependencies
      - echo "Installing dev dependencies"
      - apt-get update
      - apt-get install -y python3-pip make graphviz unzip
      - pip3 install -r requirements.txt

      # Documentation Test
      - echo "Generating documentation"
      - make html

      # Install Terraform
      - echo "Installing Terraform"
      - cd terraform
      - curl -o terraform.zip https://releases.hashicorp.com/terraform/1.4.6/terraform_1.4.6_linux_amd64.zip
      - unzip -o terraform.zip
      - sudo mv terraform /usr/local/bin/
      - terraform --version
      - terraform init && terraform validate

  build:
    commands:
      # Deployment commands
      - echo "Deploying Bootstrap Architecture..."
      - |
        if git describe --tags --exact-match > /dev/null 2>&1; then
          echo "This is a tag push event"
          ECR_REPO=sdc_aws_processing_lambda
          CDK_ENVIRONMENT=PRODUCTION
          S3_BUCKET=swsoc-sorting-lambda
          terraform workspace select prod
        elif [ "${CDK_ENVIRONMENT}" = "PRODUCTION" ]; then
          echo "This is a production environment"
          ECR_REPO=sdc_aws_processing_lambda
          S3_BUCKET=swsoc-sorting-lambda
          terraform workspace select prod
        else
          echo "This is a development environment"
          ECR_REPO=dev-sdc_aws_processing_lambda
          S3_BUCKET=dev-swsoc-sorting-lambda
          terraform workspace select dev
        fi

      # Fetch latest image and S3 key
      - |
        IMAGE_TAG=$(aws ecr describe-images --repository-name $ECR_REPO --region us-east-1 --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        S3_KEY=$(aws s3api list-objects-v2 --bucket $S3_BUCKET --query "reverse(sort_by(Contents,&LastModified))[0].Key" --output text)

      # Run Terraform apply
      - terraform apply -auto-approve -var "image_tag=$IMAGE_TAG" -var "s3_key=$S3_KEY"

      # Completion message
      - echo "Build completed on $(date)"